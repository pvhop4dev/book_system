basePath: /api/v1
definitions:
  dto.BookListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.BookResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.BookResponse:
    properties:
      author:
        type: string
      cover_image:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      isbn:
        type: string
      price:
        type: number
      published_at:
        type: string
      stock:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.CreateBookRequest:
    properties:
      author:
        maxLength: 255
        minLength: 1
        type: string
      cover_image:
        type: string
      description:
        type: string
      isbn:
        type: string
      price:
        type: number
      published_at:
        type: string
      stock:
        minimum: 0
        type: integer
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - author
    - isbn
    - price
    - published_at
    - title
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_page:
        type: integer
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.UpdateBookRequest:
    properties:
      author:
        maxLength: 255
        minLength: 1
        type: string
      cover_image:
        type: string
      description:
        type: string
      isbn:
        type: string
      price:
        type: number
      published_at:
        type: string
      stock:
        minimum: 0
        type: integer
      title:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      full_name:
        type: string
      is_active:
        type: boolean
      role:
        enum:
        - admin
        - user
        type: string
    type: object
  dto.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_login:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      updated_at:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - full_name
    - username
    type: object
  response.Response:
    description: Standard API response format
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  restapi.FileResponse:
    properties:
      filename:
        type: string
      mime_type:
        type: string
      size:
        type: integer
      url:
        type: string
    type: object
  restapi.HealthCheckResponse:
    properties:
      service:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for Book System.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Book System API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the input payload
      parameters:
      - description: Register info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - users
  /api/v1/books:
    get:
      consumes:
      - application/json
      description: Get a paginated list of books with optional filters
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Filter by author
        in: query
        name: author
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved books
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.BookListResponse'
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List all books with pagination
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with the input payload
      parameters:
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created book
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.BookResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Book with this ISBN already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new book
      tags:
      - books
  /api/v1/books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted book
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid book ID
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved book
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.BookResponse'
              type: object
        "400":
          description: Invalid book ID
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update a book with the input payload
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Update book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated book
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.BookResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Book with this ISBN already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a book
      tags:
      - books
  /api/v1/files/{filename}:
    delete:
      description: Delete a file by its name
      parameters:
      - description: File name
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a file
      tags:
      - files
    get:
      description: Get a file by its name
      parameters:
      - description: File name
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
      summary: Get a file
      tags:
      - files
  /api/v1/files/{filename}/url:
    get:
      description: Generate a pre-signed URL for a file
      parameters:
      - description: File name
        in: path
        name: filename
        required: true
        type: string
      - description: 'Expiry time in hours (default: 24)'
        in: query
        name: expiry
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a pre-signed URL for a file
      tags:
      - files
  /api/v1/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to the storage
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restapi.FileResponse'
      summary: Upload a single file
      tags:
      - files
  /api/v1/upload/multiple:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple files to the storage
      parameters:
      - collectionFormat: csv
        description: Files to upload
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/restapi.FileResponse'
                  type: array
              type: object
      summary: Upload multiple files
      tags:
      - files
  /api/v1/users:
    get:
      description: Get a list of users with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /api/v1/users/me:
    get:
      description: Get the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile of the authenticated user
      parameters:
      - description: User update info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /health:
    get:
      consumes:
      - application/json
      description: Check if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restapi.HealthCheckResponse'
      summary: Health Check
      tags:
      - health
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
